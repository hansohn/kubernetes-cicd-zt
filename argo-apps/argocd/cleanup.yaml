To make the cleanup process more streamlined and efficient, we'll simplify the script to avoid redundancy and ensure each step is executed with optimal logic and sequence. This version will focus on removing resources in a reliable order and efficiently handle CRD patching and namespace deletions without repetitive checks.
Streamlined Kubernetes Job for Cleanup

Hereâ€™s a refined script:

yaml

apiVersion: batch/v1
kind: Job
metadata:
  generateName: cleanup-resources-
  annotations:
    argocd.argoproj.io/hook: PreDelete
spec:
  template:
    spec:
      serviceAccountName: argocd-cleanup
      containers:
      - name: cleanup
        image: bitnami/kubectl
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Patching and deleting CRDs, excluding critical system CRDs..."
          kubectl get crd --no-headers | grep -vE "(kube|system)" | awk '{print $1}' | xargs -I {} kubectl patch crd {} -p '{"metadata":{"finalizers":[]}}' --type=merge
          kubectl get crd --no-headers | grep -vE "(kube|system)" | awk '{print $1}' | xargs -I {} kubectl delete crd {}

          echo "Deleting resources in all namespaces except kube-system..."
          kubectl get ns --no-headers | grep -v "kube-system" | awk '{print $1}' | xargs -I {} kubectl delete all,cm,pvc,sa,roles,rolebindings,secrets --all --namespace={}
          
          echo "Deleting namespaces, ensuring all namespaces except kube-system are considered..."
          kubectl get ns --no-headers | grep -v "kube-system" | awk '{print $1}' | xargs -I {} kubectl delete ns {} --wait=false

      restartPolicy: Never