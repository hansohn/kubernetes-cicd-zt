apiVersion: v1
kind: Secret
metadata:
  name: elastic-secrets
  namespace: eck-stack
type: kubernetes.io/basic-auth
stringData:
  username: "elastic"
  roles: "superuser"
  password: "n11111111111111111111111"
---
#apiVersion: external-secrets.io/v1beta1
#kind: ExternalSecret
#metadata:
#  name: elastic-secrets
#  namespace: eck-stack
#spec:
#  refreshInterval: "0" # default 1h , should only be refreshed on deploy (?)
#  secretStoreRef:
#    name: elastic-secrets # must match `SecretStore` name
#    kind: SecretStore
#  target:
#    name: elastic-secrets
#    creationPolicy: Owner # Owner # Owner managed by ESO
#    immutable: true # check
#  data:
#    - secretKey: password # arbitrary assigned key name, used in Jenkinsfile/Pipeline
#      remoteRef:
#        key: elastic_api_password  # The path to SSM parameter
#        conversionStrategy: Default # argocd appset will loop infinitely if not set
#        decodingStrategy: None # argocd appset will loop infinitely if not set
#        metadataPolicy: None # argocd appset will loop infinitely if not set
#
#    - secretKey: username # arbitrary assigned key name, used in Jenkinsfile/Pipeline
#      remoteRef:
#        key: elastic_api_username  # The path to SSM parameter
#        conversionStrategy: Default # argocd appset will loop infinitely if not set
#        decodingStrategy: None # argocd appset will loop infinitely if not set
#        metadataPolicy: None # argocd appset will loop infinitely if not set
#
#    - secretKey: roles # arbitrary assigned key name, used in Jenkinsfile/Pipeline
#      remoteRef:
#        key: elastic_api_roles  # The path to SSM parameter
#        conversionStrategy: Default # argocd appset will loop infinitely if not set
#        decodingStrategy: None # argocd appset will loop infinitely if not set
#        metadataPolicy: None # argocd appset will loop infinitely if not set
#---
#apiVersion: external-secrets.io/v1beta1
#kind: SecretStore
#metadata:
#  name: elastic-secrets
#  namespace: eck-stack
#spec:
#  provider:
#    aws:
#      service: ParameterStore
#      region: us-east-1  # AWS region specific, pending dynamic value
#      auth:
#        jwt: # requires `sts:AssumeRoleWithWebIdentity` permission (set in tf)
#          serviceAccountRef:
#            name: elastic-operator # name of actual serviceAccount (not role)